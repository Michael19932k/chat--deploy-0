{"version":3,"sources":["serviceWorker.js","BackgroundAnimation.js","SignUpBox.js","NavButtonMenu.js","upState.js","LinkWindow.js","ChatBox.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","BackgroundAnimation","react_default","a","createElement","className","SignUpBox","NavButtonMenu","react_router_dom","to","StateContext","createContext","StateProvider","_ref","reducer","appState","children","Provider","value","useReducer","useStateValue","useContext","LinkWindow","props","_useState","useState","_useState2","Object","slicedToArray","tokenValue","settokenValue","_useState3","_useState4","userName","setuserName","_useStateValue","_useStateValue2","dispatchupstateUserName","localStorage","setItem","console","log","getItem","onSubmit","e","preventDefault","fetch","method","body","JSON","stringify","headers","Content-Type","then","res","json","response","success","type","payload","history","push","concat","catch","error","required","onChange","target","onClick","createRoomId","roomId","socket","io","connect","tempSocketMessages","counter","namesTemp","ChatBox","context","setName","name","setNewMsgs","_useState5","_useState6","messages","setMessages","_useState7","_useState8","setNames","containerRef","useRef","room","params","id","useEffect","reverse","on","data","namesArray","filteredItems","x","emit","current","getBoundingClientRect","height","scrollTop","scrollHeight","map","name2","index","key","ref","message","date","toString","slice","autoFocus","onKeyUp","length","Date","ReactDOM","render","upState_StateProvider","test","state","action","objectSpread","src_BackgroundAnimation","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83f5941b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './BackgroundAnimation.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { defaultCipherList } from 'constants';\r\n\r\n\r\nfunction BackgroundAnimation(){\r\nreturn(\r\n<div className=\"area\" >\r\n    <ul className=\"circles\">\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n    </ul>\r\n</div >)\r\n}\r\nexport default BackgroundAnimation;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './SignUpBox.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nfunction SignUpBox() {\r\n\r\n    return (\r\n        <div id=\"login\" class=\"login-form-container\">\r\n            <header>LOGIN - SIGN UP</header>\r\n            <fieldset>\r\n                <div class=\"input-wrapper\">\r\n                    <input type=\"text\" placeholder=\"your@email.com\" />\r\n                </div>\r\n                <div class=\"input-wrapper\">\r\n                    <input type=\"password\" placeholder=\"password\" />\r\n                </div>\r\n                <button id=\"continue\" className=\"buttonn\">CONTINUE</button>\r\n            </fieldset>\r\n        </div>)\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default SignUpBox;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './NavButtonMenu.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";       \r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction NavButtonMenu() {\r\n\r\n    return (\r\n\r\n        <div className=\"buttonWrapper\">\r\n            <div className=\"btn-group\">\r\n                <Link to={\"/LinkWindow\"} className='buttonS'>DemoChat</Link>\r\n                {/* <Link to={\"/\"} c className=\"buttonS\">Log In</Link>\r\n                <Link to={\"/\"} c className=\"buttonS\">Sign Up</Link> */}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default NavButtonMenu;","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nconst StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, appState, children }) => (\r\n    <StateContext.Provider value={useReducer(reducer, appState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './LinkWindow.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { defaultCipherList } from 'constants';\r\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\r\nimport {useStateValue} from './upState';\r\n\r\nfunction LinkWindow(props) {\r\n    const [tokenValue, settokenValue] = useState(\"\");\r\n    const [userName, setuserName] = useState(\"\");\r\n    const [upstateUserName, dispatchupstateUserName] = useStateValue();\r\n    \r\n\r\n\r\n    localStorage.setItem(\"name\", { userName });\r\n    console.log(localStorage.getItem(\"name\"))\r\n\r\n    return (\r\n        <div className=\"LinkWindow\">\r\n            <div className=\"minorLinkWindowWrapper\">\r\n                <form onSubmit={nameToken}>\r\n                    <div><input type=\"text\" required value={userName} onChange={e => setuserName(e.target.value)}>\r\n                    </input> &larr;Type your nick name</div>\r\n                    <div><input type=\"text\" value={tokenValue} onChange={e => settokenValue(e.target.value)}>\r\n                    </input> &larr;Please enter your token here</div>\r\n                    <input onClick={fetchLink} type=\"button\" value=\"Generate\"></input>\r\n                    <input type=\"submit\" value=\"Submit\"></input></form>\r\n                <Link to={\"/\"} className='getToMain'>Get Back</Link>\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n    function fetchLink() {\r\n        var createRoomId = \"Id\"\r\n        // console.log(\"not broken yet\")\r\n        fetch('/createRoomId', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ createRoomId }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                console.log(JSON.stringify(response))\r\n                settokenValue(response.roomId);\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n\r\n\r\n    }\r\n    function nameToken(e) {\r\n        e.preventDefault()\r\n        fetch('/generateRoomId', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ userName, tokenValue }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                console.log(response)\r\n                console.log(tokenValue)\r\n                if (response.success) {\r\n                    dispatchupstateUserName({\r\n                        type: 'passName',\r\n                        payload: {userName}  //payload\r\n                    })\r\n                    //  console.log(userName)\r\n                    props.history.push(`/rooms/${tokenValue}`)\r\n                }\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default LinkWindow;","import ReactDOM from 'react-dom';\r\nimport './ChatBox.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { defaultCipherList } from 'constants';\r\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useStateValue } from './upState';\r\nimport io from 'socket.io-client';\r\n\r\n\r\nvar socket = io.connect(\"/*\");\r\nlet tempSocketMessages = [];\r\n\r\nlet counter = 0;\r\nlet namesTemp = [];\r\n\r\n\r\nfunction ChatBox({ match }, e, props) {\r\n    const [context,] = useStateValue();\r\n    const [serviceList,] = useState(context.setName.userName)\r\n    let name = serviceList\r\n    // ```````````````````````````````````````````````````````````\r\n    const [newMsgs, setNewMsgs] = useState(0);\r\n    const [messages, setMessages] = useState([]);\r\n    const [names, setNames] = useState([]);\r\n    const containerRef = useRef(null);\r\n    let room = match.params.id\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        fetch(`/messages/${room}`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ name }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                let newOrder = response.messages.reverse();\r\n                setMessages(response.messages);\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n\r\n\r\n        socket.on('message', function (data) {\r\n            // console.log(data);\r\n            tempSocketMessages.push(data)\r\n            setNewMsgs(counter + 1);\r\n            counter++;\r\n            // console.log(newMsgs)\r\n        });\r\n\r\n        socket.on('name', namesArray => {\r\n            // console.log(namesArray);\r\n            if(namesArray){\r\n                namesTemp = namesArray;\r\n                // console.log(namesTemp);\r\n                setNames(counter + 1);\r\n                counter++;\r\n            }          \r\n        })\r\n        socket.on('updateusers', filteredItems => {\r\n            if(filteredItems){\r\n            let x = filteredItems\r\n            console.log(x)\r\n            namesTemp = x;\r\n            if(filteredItems){\r\n                setNames(counter + 1);\r\n                counter++;\r\n            }          \r\n            }\r\n        })\r\n\r\n        \r\n        socket.emit('subscribe', room);\r\n        socket.emit('name', { name, room });\r\n  \r\n    \r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const chatHeight = containerRef.current.getBoundingClientRect().height;\r\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\r\n\r\n\r\n    })\r\n\r\n    return (\r\n        <div className=\"gridWrapper\">\r\n            <div className=\"original-grid-container\">\r\n                <div className=\"NickNamesArea\">\r\n                    {\r\n                        namesTemp.map((name2, index) => {\r\n                            return (\r\n                                <p key={index}>{name2}</p>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"ChatArea\" ref={containerRef}>\r\n                    {\r\n                        messages.map((message, index) => {\r\n\r\n\r\n                            return <div className=\"messageBubble\" key={index}><div className=\"userName\">{message.name}</div><div className=\"messageDate\">{message.date.toString().slice(11, -8)}</div>{<br />}{message.message}</div>\r\n                        })\r\n                    }\r\n                    {\r\n                        tempSocketMessages.map((data, index) => {\r\n                            // console.log(data)\r\n                            return <div className=\"messageBubble\" key={index + 'socket'}><div className=\"userName\">{data.name}</div><div className=\"messageDate\">{data.date.toString().slice(11, -8)}</div>{<br />}{data.message}</div>\r\n                        })\r\n                    }\r\n                </div>\r\n                <div className=\"ChatInputArea\">\r\n                    <div className=\"messageInputWrapper\">\r\n                        <textarea className=\"messageTypingSpot\" type=\"text\" autoFocus={true} onKeyUp={(e) => {\r\n                            if (e.key === 'Enter') {\r\n\r\n                                if (e.target.value.length > 1) {\r\n                                    socket.emit('sendMessage', { room, message: e.target.value, date: new Date(), name });\r\n                                }\r\n                                e.target.value = '';\r\n\r\n                            }\r\n                        }} ></textarea>\r\n\r\n                    </div></div>\r\n\r\n            </div>\r\n        </div >\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default ChatBox;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport './App.css';\r\nimport BackgroundAnimation from './BackgroundAnimation';\r\nimport SignUpBox from './SignUpBox';\r\nimport NavButtonMenu from './NavButtonMenu';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport LinkWindow from './LinkWindow';\r\nimport ChatBox from './ChatBox';\r\nimport { StateProvider } from './upState';\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function App() {\r\n  const appState = {\r\n    setName: [],\r\n    test: \"fff\",\r\n  };\r\n\r\n  const reducer = (state, action) => {\r\n    switch (action.type) {\r\n      case 'passName':\r\n        return { ...state, setName: action.payload };\r\n      case 'testing':\r\n        return { ...state, test: action.payload };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  return (\r\n    <StateProvider appState={appState} reducer={reducer}>\r\n    <Router>\r\n      <div>\r\n        <BackgroundAnimation />\r\n        <Route exact path=\"/\" component={NavButtonMenu} />\r\n        <Route path=\"/LinkWindow\" component={LinkWindow} />\r\n        <Route path=\"/rooms/:id\" component={ChatBox} />\r\n      </div>\r\n    </Router>\r\n      </StateProvider >\r\n        );\r\n}\r\n\r\n\r\n"],"sourceRoot":""}