{"version":3,"sources":["serviceWorker.js","BackgroundAnimation.js","SignUpBox.js","NavButtonMenu.js","upState.js","InfoIcon.js","LinkWindow.js","ChatBox.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","BackgroundAnimation","react_default","a","createElement","className","SignUpBox","NavButtonMenu","react_router_dom","to","StateContext","createContext","StateProvider","_ref","reducer","appState","children","Provider","value","useReducer","useStateValue","useContext","Info","_useState","useState","visibility","_useState2","Object","slicedToArray","Setvisibility","_useState3","_useState4","ClickedForVisibilty","SetClickedForVisibilty","style","onClick","onMouseOver","onMouseOut","LinkWindow","props","tokenValue","settokenValue","userName","setuserName","_useStateValue","_useStateValue2","dispatchupstateUserName","sessionStorage","setItem","onSubmit","e","preventDefault","fetch","method","body","JSON","stringify","headers","Content-Type","then","res","json","response","console","log","success","type","payload","history","push","concat","catch","error","src_InfoIcon","required","onChange","target","createRoomId","roomId","socket","io","transports","upgrade","tempSocketMessages","counter","namesTemp","ChatBox","getItem","name","setNewMsgs","_useState5","_useState6","messages","setMessages","_useState7","_useState8","setNames","containerRef","useRef","room","params","id","useEffect","reverse","on","data","namesArray","filteredItems","x","emit","current","getBoundingClientRect","height","scrollTop","scrollHeight","map","name2","index","key","ref","message","date","toString","slice","placeholder","autoFocus","onKeyUp","length","Date","ReactDOM","render","upState_StateProvider","setName","test","state","action","objectSpread","src_BackgroundAnimation","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07d0018c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './BackgroundAnimation.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { defaultCipherList } from 'constants';\r\n\r\n\r\nfunction BackgroundAnimation(){\r\nreturn(\r\n<div className=\"area\" >\r\n    <ul className=\"circles\">\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n    </ul>\r\n</div >)\r\n}\r\nexport default BackgroundAnimation;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './SignUpBox.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nfunction SignUpBox() {\r\n\r\n    return (\r\n        <div id=\"login\" class=\"login-form-container\">\r\n            <header>LOGIN - SIGN UP</header>\r\n            <fieldset>\r\n                <div class=\"input-wrapper\">\r\n                    <input type=\"text\" placeholder=\"your@email.com\" />\r\n                </div>\r\n                <div class=\"input-wrapper\">\r\n                    <input type=\"password\" placeholder=\"password\" />\r\n                </div>\r\n                <button id=\"continue\" className=\"buttonn\">CONTINUE</button>\r\n            </fieldset>\r\n        </div>)\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default SignUpBox;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './NavButtonMenu.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";       \r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction NavButtonMenu() {\r\n\r\n    return (\r\n\r\n        <div className=\"buttonWrapper\">\r\n            <div className=\"btn-group\">\r\n                <Link to={\"/LinkWindow\"} className='buttonS'>FlashChat</Link>\r\n                {/* <Link to={\"/\"} c className=\"buttonS\">Log In</Link>\r\n                <Link to={\"/\"} c className=\"buttonS\">Sign Up</Link> */}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default NavButtonMenu;","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nconst StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, appState, children }) => (\r\n    <StateContext.Provider value={useReducer(reducer, appState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);","import React, { useState, useEffect } from 'react';\r\nimport './InfoIcon.css';\r\n\r\nfunction Info() {\r\n    const [visibility, Setvisibility] = useState({ visibility: \"hidden\" })\r\n    const [ClickedForVisibilty, SetClickedForVisibilty] = useState(false)\r\n    function HoverToshowIT() {\r\n        Setvisibility({ visibility: \"visible\" })\r\n\r\n    }\r\n    function ClickedToShow() {\r\n        SetClickedForVisibilty(true)\r\n        Setvisibility({ visibility: \"visible\" })\r\n\r\n    }\r\n    function ClickedToClose() {\r\n        SetClickedForVisibilty(false)\r\n        Setvisibility({ visibility: \"hidden\" })\r\n\r\n    }\r\n    function hideIT() {\r\n        if (ClickedForVisibilty === true) {\r\n            Setvisibility({ visibility: \"visible\" })\r\n        }\r\n        Setvisibility({ visibility: \"hidden\" })\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='infoWrapper'>\r\n                <div className=\"bubble\" style={visibility}>\r\n                    <div className='infoContentWrapper'>\r\n                        <div className='infoText'>You and the person you want to chat with need to have the same token. Press \"Generate\" to create a room and make sure your friend insert the same token you got. If you want to enter to existing chat simply type your nickname and insert the token of the room you want to get in.\r\n                        All nicknames, room tokens and chats automatically deleted from the data base every 24 hours from the moment of creation of the said room or a nickname.</div>\r\n                        <div className='CloseButton' onClick={ClickedToClose}>&#215;</div>\r\n                    </div>\r\n                </div>\r\n                <div className='info' onClick={ClickedToShow} onMouseOver={HoverToshowIT} onMouseOut={hideIT}><i className=\"material-icons\">info</i></div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Info;","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './LinkWindow.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { defaultCipherList } from 'constants';\r\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\r\nimport { useStateValue } from './upState';\r\nimport InfoIcon from './InfoIcon'\r\n\r\n\r\nfunction LinkWindow(props) {\r\n    const [tokenValue, settokenValue] = useState(\"\");\r\n    const [userName, setuserName] = useState(\"\");\r\n    const [upstateUserName, dispatchupstateUserName] = useStateValue();\r\n\r\n\r\n\r\n    sessionStorage.setItem(\"name\",  userName );\r\n\r\n    return (\r\n        <div className=\"LinkWindow\">\r\n            \r\n            <div className=\"minorLinkWindowWrapper\">\r\n                \r\n                <form onSubmit={nameToken}>\r\n                    \r\n                    <div>Type your nick name</div><div className=\"InfoIconWrapper\"><InfoIcon/></div>\r\n                    <input type=\"text\" required value={userName} onChange={e => setuserName(e.target.value)}>\r\n                    </input>\r\n                    <div>Please enter your token here</div>\r\n                    <input type=\"text\" value={tokenValue} onChange={e => settokenValue(e.target.value)}>\r\n                    </input>\r\n                    <input onClick={fetchLink} type=\"button\" value=\"Generate\"></input>\r\n                    <input type=\"submit\" value=\"Submit\"></input></form>\r\n                <Link to={\"/\"} className='getToMain'>Get Back</Link>\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n            \r\n        </div>\r\n\r\n    )\r\n    function fetchLink() {\r\n        var createRoomId = \"Id\"\r\n        // console.log(\"not broken yet\")\r\n        fetch('createRoomId', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ createRoomId }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                console.log(JSON.stringify(response))\r\n                settokenValue(response.roomId);\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n\r\n\r\n    }\r\n    function nameToken(e) {\r\n        e.preventDefault()\r\n        fetch('generateRoomId', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ userName, tokenValue }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                console.log(response)\r\n                console.log(tokenValue)\r\n                if (response.success) {\r\n                    dispatchupstateUserName({\r\n                        type: 'passName',\r\n                        payload: { userName }  //payload\r\n                    })\r\n                    //  console.log(userName)\r\n                    props.history.push(`/rooms/${tokenValue}`)\r\n                }\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default LinkWindow;","import ReactDOM from 'react-dom';\r\nimport './ChatBox.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { defaultCipherList } from 'constants';\r\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport io from 'socket.io-client'\r\nimport { animateScroll as scroll } from \"react-scroll\"\r\nimport { useStateValue } from './upState';\r\n\r\nvar socket = io({ transports: ['websocket'], upgrade: false });\r\nlet tempSocketMessages = [];\r\n\r\nlet counter = 0;\r\nlet namesTemp = [];\r\n\r\n\r\nfunction ChatBox({ match }, e, props) {\r\n    const [context,] = useStateValue();\r\n    const [name, setName] = useState(sessionStorage.getItem('name'))\r\n    // context.setName.userName\r\n\r\n    // const [name, setName] = useState(serviceList);\r\n    // ```````````````````````````````````````````````````````````\r\n    const [newMsgs, setNewMsgs] = useState(0);\r\n    const [messages, setMessages] = useState([]);\r\n    const [names, setNames] = useState([]);\r\n\r\n    const containerRef = useRef(null);\r\n    let room = match.params.id\r\n\r\n    useEffect(() => {\r\n\r\n        // if (name === undefined || null) {\r\n        //     let storageName = localStorage.getItem('name')\r\n        //     setName(storageName)\r\n        // } \r\n\r\n        console.log('check name', name)\r\n\r\n\r\n        fetch(`http://localhost:3001/messages/${room}`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ name }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                let newOrder = response.messages.reverse();\r\n                setMessages(response.messages);\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n\r\n\r\n        socket.on('message', function (data) {\r\n            // console.log(data);\r\n            tempSocketMessages.push(data)\r\n            setNewMsgs(counter + 1);\r\n            counter++;\r\n            // console.log(newMsgs)\r\n        });\r\n\r\n        socket.on('name', namesArray => {\r\n            // console.log(namesArray);\r\n            if (namesArray) {\r\n                namesTemp = namesArray;\r\n                // console.log(namesTemp);\r\n                setNames(counter + 1);\r\n                counter++;\r\n            }\r\n        })\r\n        socket.on('updateusers', filteredItems => {\r\n            if (filteredItems) {\r\n                let x = filteredItems\r\n                console.log(x)\r\n                namesTemp = x;\r\n                if (filteredItems) {\r\n                    setNames(counter + 1);\r\n                    counter++;\r\n                }\r\n            }\r\n        })\r\n\r\n\r\n        socket.emit('subscribe', room);\r\n        socket.emit('name', { name, room });\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const chatHeight = containerRef.current.getBoundingClientRect().height;\r\n        containerRef.current.scrollTop = containerRef.current.scrollHeight;\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"gridWrapper\">\r\n            <div className=\"original-grid-container\">\r\n                <div className=\"NickNamesArea\">\r\n                    Chat mates:\r\n                    {\r\n                        namesTemp.map((name2, index) => {\r\n                            return (\r\n                                <p key={index}>{name2}</p>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"ChatArea\" ref={containerRef}>\r\n                    {\r\n                        messages.map((message, index) => {\r\n\r\n\r\n                            return <div className=\"messageBubble\" key={index}><div className=\"userName\">{message.name}</div><div className=\"messageDate\">{message.date.toString().slice(11, -8)}</div>{<br />}{message.message}</div>\r\n                        })\r\n                    }\r\n                    {\r\n                        tempSocketMessages.map((data, index) => {\r\n                            // console.log(data)\r\n                            return <div className=\"messageBubble\" key={index + 'socket'}><div className=\"userName\">{data.name}</div><div className=\"messageDate\">{data.date.toString().slice(11, -8)}</div>{<br />}{data.message}</div>\r\n                        })\r\n                    }\r\n                </div>\r\n                <div className=\"ChatInputArea\">\r\n                    <div className=\"messageInputWrapper\">\r\n                        <textarea className=\"messageTypingSpot\" placeholder=\"Press to type...\" type=\"text\" autoFocus={true} onKeyUp={(e) => {\r\n                            if (e.key === 'Enter') {\r\n\r\n                                if (e.target.value.length > 1) {\r\n                                    socket.emit('sendMessage', { room, message: e.target.value, date: new Date(), name });\r\n                                }\r\n                                e.target.value = '';\r\n\r\n                            }\r\n                        }} ></textarea>\r\n\r\n                    </div></div>\r\n\r\n            </div>\r\n        </div >\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ChatBox;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport './App.css';\r\nimport BackgroundAnimation from './BackgroundAnimation';\r\nimport SignUpBox from './SignUpBox';\r\nimport NavButtonMenu from './NavButtonMenu';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport LinkWindow from './LinkWindow';\r\nimport ChatBox from './ChatBox';\r\nimport { StateProvider } from './upState';\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function App() {\r\n  const appState = {\r\n    setName: [],\r\n    test: \"fff\",\r\n  };\r\n\r\n  const reducer = (state, action) => {\r\n    switch (action.type) {\r\n      case 'passName':\r\n        return { ...state, setName: action.payload };\r\n      case 'testing':\r\n        return { ...state, test: action.payload };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  return (\r\n    <StateProvider appState={appState} reducer={reducer}>\r\n    <Router>\r\n      <div>\r\n        <BackgroundAnimation />\r\n        <Route exact path=\"/\" component={NavButtonMenu} />\r\n        <Route path=\"/LinkWindow\" component={LinkWindow} />\r\n        <Route path=\"/rooms/:id\" component={ChatBox} />\r\n      </div>\r\n    </Router>\r\n      </StateProvider >\r\n        );\r\n}\r\n\r\n\r\n"],"sourceRoot":""}